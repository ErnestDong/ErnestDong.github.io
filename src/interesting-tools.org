#+TITLE: interesting-tools
#+DATE: <2021-07-03>
#+AUTHOR: Ernest Dong
#+EMAIL: dongcy2000@outlook.com
#+HUGO_BASE_DIR: ../
#+HUGO_SECTION: posts

* Table of Contents :TOC_3:noexport:
- [[#interesting-tools][Interesting Tools]]
  - [[#用-pass-管理密码][用 Pass 管理密码]]
    - [[#pass-的优点][Pass 的优点]]
    - [[#安装-pass-与-browserpass][安装 =Pass= 与 =browserpass=]]
    - [[#配置-pass][配置 =Pass=]]
    - [[#配置-pass-for-ios][配置 =Pass for iOS=]]
  - [[#用-clashx-托管更新不覆盖本地规则][用 ClashX 托管更新不覆盖本地规则]]
    - [[#托管文件][托管文件]]
    - [[#解决办法][解决办法]]
  - [[#doom-emacs-写论文的小-tweak][Doom Emacs 写论文的小 tweak]]
    - [[#和学术搜索集成][和学术搜索集成]]
    - [[#org-roam-bibtex][org-roam-bibtex]]
    - [[#all-the-icons-completion][all-the-icons-completion]]
    - [[#复制-pdf-之后粘贴去掉空格][复制 PDF 之后粘贴去掉空格]]
    - [[#deft-with-pinyin][deft with pinyin]]

* Interesting Tools :fun:
** 用 Pass 管理密码
:PROPERTIES:
:EXPORT_FILE_NAME: the unix pass
:EXPORT_DATE: 2021-07-03
:END:
pass for macOS usage
<!--more-->
*** Pass 的优点
- [[https://www.passwordstore.org/][pass]] 是符合 unix 哲学的密码管理器，利用 gpg 本地加密存储，让人感觉比依靠互联网账号的密码管理器安全。
- 和浏览器完美，利用[[https://github.com/browserpass/browserpass-extension][browserpass]]可以自动填充
- iOS 系统上有 [[https://github.com/mssun/passforios][pass for iOS]]，相当于免费的 1Password
- [[https://github.com/hlissner/doom-emacs][doom emacs]] 中有现成的 =:tool pass= 可以使用

遗憾的是 pass 需要一点点配置
*** 安装 =Pass= 与 =browserpass=
#+begin_src shell
brew tap amar1729/formulae # browserpass tap
brew install pass browserpass
#+end_src
之后根据 caveats
#+begin_src shell
PREFIX='/usr/local/opt/browserpass' make hosts-BROWSER-user -f '/usr/local/opt/browserpass/lib/browserpass/Makefile'
#+end_src

其中 =BROWSER= 可以是 chromium chrome vivaldi brave firefox 这几种浏览器 +(Safari 连 =endnote click= 都没有，除了轻快好难用)+
*** 配置 =Pass=
**** Pass init
=Pass= 可以说是一套工具的集合，其中的 GnuPG 就是用来加密的。
#+begin_src shell
gpg --full-generate-key
gpg --list-secret-keys --keyid-format LONG
# sec   some-text/your-keys time-today [SC]
pass init "your-keys here!"
#+end_src

从此 =$HOME= 下的 =.passwordstore= & =.gnupg= 就不能删了

**** Pass 导入
把 Chrome +等+（ +万恶的+ Google 全家桶太好用了不得不用 Chrome）密码导出后可以用这段[[https://gist.github.com/ErnestDong/0fc61d76777770a03ffc5bdfda2a5b17][gist]]的 python 代码（参考自 [[https://www.passwordstore.org/][pass]] 官网）转换为 pass 的格式

用这段 gist 导出后 pass 是这样存储的：
#+begin_src shell
tree
# --example.com
#  |-username.gpg
#+end_src
其中的 =username.gpg= 解密后是这样的
#+begin_example
a Strong Password
user: username
#+end_example

**** Pass 使用
#+begin_src shell
pass list # 展示.passwordstore目录树
pass insert # see below 插入已有的
... # 用emacs 所以不记这些了
#+end_src
详细可以看[[https://wiki.archlinux.org/title/Pass][archwiki]]

**** Tweaks
***** 用 git 同步
#+begin_src shell
pass git init
#+end_src
这样每次加入密码都会 commit 并且可以同步。 用 pass for iOS 时需要 git 同步。不过 PGP 加密毕竟不是水货。
***** git hook
每次 commit 后自动 push 到 GitHub 上。
#+begin_src shell
echo "git push -u origin main" >> .git/hooks/post-commit
chmod u+x .git/hooks/post-commit
#+end_src

***** mac 的 browser pass
#+begin_src shell
echo "pinentry-program /usr/local/bin/pinentry-mac
" >> ~/.gnupg/gnupg.conf
#+end_src
然后可以在对应的网站用 =command + L= 自动输入密码了。
*** 配置 =Pass for iOS=
记得在“系统设置-密码”里填充来源加上 pass，就可以享受免费的 1password 了

** 用 ClashX 托管更新不覆盖本地规则
Clash for macOS usage
<!--more-->
*** 托管文件

[[https://github.com/yichengchen/clashX][clashX]] （我用开源版）可以有多个托管配置文件，尽管可以直接编辑 =remote.yaml= ，但是托管更新后自己编辑的规则就被覆盖了

*** 解决办法

我贴到了[[https://gist.github.com/ErnestDong/8b59aad6a332401b3062ab13db3a559f][gist]]上

假设 =~/.config/clash/= 是这样的：

#+begin_src shell :results output
$ exa ~/.config/clash/ -T

/Users/dcy/.config/clash
├── config.yaml
└── remote.yaml

#+end_src
copy =config.yaml= 为 =local.yaml= 并添加
#+begin_src yaml
# proxy provider start here
proxy-providers:
  something-great:
    type: http
    url: your-remote-url
    path: ./remote.yaml
    interval: 36000
    health-check:
      enable: true
      url: http://www.gstatic.com/generate_204
      interval: 3600
# proxy provider end

proxy-groups:
  - name: "your-awesome-name"
    type: select
    use:
      - something-great
rules:
  - "DOMAIN-KEYWORD,google,your-awesome-name"
#+end_src

其中 =your-remote-url= 为订阅地址， =rules= 可以复制 =remote.yaml= 的相应部分，然后添加自己的规则，这样就不会被覆盖了

** Doom Emacs 写论文的小 tweak
:PROPERTIES:
:EXPORT_FILE_NAME: Doom Thesis
:EXPORT_DATE: 2021-12-30
:END:
最近开始写本科毕业论文，老师让我先读文献。读文献的时候找到一些小 tweak 分享出来。

emacs = jabref + onenote + tex studio

*** 和学术搜索集成
org-ref 有回车然后可以搜索这篇文章在 Google Scholar/web of science 这样的功能。切换到 vertico、用 org-mode 的 cite 之后 org-ref 显得有些重了，我想到了 doom 的 lookup 功能。
#+begin_src emacs-lisp
(setq! +lookup-provider-url-alist
      '(
        ("Google" +lookup--online-backend-google "https://google.com/search?q=%s")
        ("DevDocs.io" "https://devdocs.io/#q=%s")
        ("Google Scholar" "https://scholar.google.com/scholar?q=%s")
        ("Xueshu" "https://xueshu.baidu.com/s?wd=%s")
        ("Github" "https://github.com/search?ref=simplesearch&q=%s")))
#+end_src

这样用 K 就在这些学术搜索网站上搜到相应论文，下载后在 bibtex entry 中添加文件路径（利用 embark）

![[https://emacs-china.org/uploads/default/original/3X/4/a/4addd520ac2a63063c00f60b5dbdeba61fb94a3e.png][K]]
*** org-roam-bibtex
每周跟老师汇报读文献进展，用 org-roam-bibtex 配合 org-roam 做摘要，显得比老师给的用 excel 好看些（Intel Mac excel 太卡了，还容易崩溃）。分类是老师给我的示例做的，配合 org-cite 而非 org-ref。

#+begin_src emacs-lisp
(use-package! org-roam-bibtex
  :after org-roam
  :hook (org-roam-mode . org-roam-bibtex-mode)
  :config
  (setq! orb-process-file-keyword t
         orb-citekey-format "@%s"
         orb-roam-ref-format 'org-cite
         orb-insert-generic-candidates-format 'entry
         orb-file-field-extensions '("pdf"))
  (add-to-list 'org-roam-capture-templates
               '("b" "Bibliography note" plain
                 "%?"
                 :target (file+head "thesis/${citekey}.org" ":PROPERTIES:
:ROAM_REFS: @${citekey}
:END:
,#+TITLE: ${title}\n
,#+filetags: :thesis:
,#+bibliography: ../reference.bib
[[${file}${url}][${title}]]
\* 主题
\* 数据
\* 分析方法
\* 模型
\* 结论")
                 :unnarrowed t)))
#+end_src
第一行是文献的链接，方便查看

![[https://emacs-china.org/uploads/default/optimized/3X/8/0/806d478a0db9daf90b7e9cf07542df8efcded0a1_2_1380x862.png][example]]
*** all-the-icons-completion
all-the-icons-completion 增加类似 all-the-icons-ivy-rich 的 icon
#+begin_src emacs-lisp
(after! all-the-icons-completion)
(defun all-the-icons-completion-get-icon (cand cat)
  "Return the icon for the candidate CAND of completion category CAT."
  (cl-case cat
    (file (all-the-icons-completion-get-file-icon cand))
    (project-file (all-the-icons-completion-get-file-icon cand))
    (buffer (all-the-icons-completion-get-buffer-icon cand))
    (command (concat (all-the-icons-octicon "gear":height 0.9 :v-adjust -0.05) " "))
    (org-roam-node (concat (all-the-icons-octicon "database":height 0.9 :v-adjust -0.05) " "))
    (t "")))
#+end_src
![[https://emacs-china.org/uploads/default/original/3X/8/8/88e62c52a5894a0348d34638860d656aef4fba3f.png][example]]

*** 复制 PDF 之后粘贴去掉空格
#+begin_src elisp
 (defun erase-space-in-line()
  "Clear space in line after copy"
  (interactive)
  (setq buf (s-replace " " "" (thing-at-point 'line)))
  (kill-whole-line)
  (insert buf))
#+end_src


*** deft with pinyin
用拼音搜索 =deft=
#+begin_src emacs-lisp
(after! deft
  (setq deft-incremental-search nil)
  (defun deft-search-forward (str)
    "Function to use when matching files against filter strings STR.
This function calls `search-forward' when `deft-incremental-search'
is non-nil and `re-search-forward' otherwise."
    (let ((case-fold-search deft-case-fold-search))
      (if deft-incremental-search
          (search-forward str nil t)
        (re-search-forward (pinyinlib-build-regexp-string str) nil t)))))
#+end_src
